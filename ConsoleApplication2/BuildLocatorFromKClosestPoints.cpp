// VTKtest.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include <iostream>
#include <vtkSmartPointer.h>
#include <vtkPoints.h>
#include <vtkPointSource.h>
#include <vtkIdList.h>
#include <vtkKdTree.h>
int main(int, char* [])
{
    //Create some pints
    double origin[3] = { 0.0,0.0,0.0 };
    double x[3] = { 1.0,0.0,0.0 };
    double y[3] = { 0.0,1.0,0.0 };
    double z[3] = { 0.0,0.0,1.0 };

    vtkSmartPointer<vtkPoints> points =
        vtkSmartPointer<vtkPoints>::New();
    points->InsertNextPoint(origin);
    points->InsertNextPoint(x);
    points->InsertNextPoint(y);
    points->InsertNextPoint(z);

    //Create the tree
    vtkSmartPointer<vtkKdTree> pointTree =
        vtkSmartPointer<vtkKdTree>::New();
    pointTree->BuildLocatorFromPoints(points);

    //Find the 2 closest points to (0.5,0.0)
    vtkIdType k = 2;
    double testPoint[3] = { 0.5,0.0,0.0 };
    vtkSmartPointer<vtkIdList> result =
        vtkSmartPointer<vtkIdList>::New();

    pointTree->FindClosestNPoints(k, testPoint, result);

    for (vtkIdType i = 0; i < k; i++)
    {
        vtkIdType point_ind = result->GetId(i);
        double p[3];
        points->GetPoint(point_ind, p);
        std::cout << "Closest point "
            << i << ": Point " << point_ind << ": ("
            << p[0] << "," << p[1] << ", " << p[2] << ")" << std::endl;
    }

    return EXIT_SUCCESS;

}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
